extern crate header;
use header::vbft_block_info::*;
use header::*;

extern crate hex;

use elrond_wasm::elrond_codec::*;
use zero_copy_source::ZeroCopySource;

#[test]
fn test_header_deserialization() {
    let input = "00000000ffffffffffffff7f721adaf73aaedee422b623581572078e895f7a47b63999b301d8a78c67ebf1fec31614565201089bf5c639d923ebfc63541c91522b8c29b0ff605bebac309b0e0000000000000000000000000000000000000000000000000000000000000000e7f41653fdaf63c4366db84674af2b614fcc40d5f37af5af4ccfad543fb318bc94bd3a5f60ea0000bbcb0265fa485dc6fd7804010000004104c143be3bd9216ed6bb16da1d1f9e86c933d66066f195a9787ed787349fdbb28a8eefe090391539ec512b50749a6d76fa1e80bb405df7d73c39ce462bc0b15d7b404c0f9fbb0c7864aca426b22d7357a16035ecac127987f1c02060c705ac6852274dbd5e1e31dee1084d97af8f95126004f56d88da1e079f9c8b8c93a01d7eda8160ea00000100000002000000070000000200000000e40b540200000000e40b540200000000e40bea00003cc22b9403d96ee5c9422ca9d502e0907617ccb20623120503ef44beba84422bd76a599531c9fe50969a929a0fee35df66690f370ce19fa8c0231205022092e34e0176dccf8abb496b833d591d25533469b3caf0e279b9742955dd8fc323120503a4f44dd65cbcc52b1d1ac51747378a7f84753b5f7bf2760ca21390ced6b172bb231205027bd771e68adb88398282e21a8b03c12f64c2351ea49a2ba06a0327c83b239ca923120502696c0cbe74f01ee85e3c0ebe4ebdc5bea404f199d0262f1941fd39ff0d100257231205038247efcfeae0fdf760685d1ac1c083be3ff5e9a4a548bc3a2e98f0434f0924830642011ce631bea110252971770367cf76e7b8255ca0bfcaa5bc35468d31c3b72eac364d76bd89b73879f30c7bd08326558d072e19e6f96cbb808dcbd40e4a209fe7f15742011ccffc25fd448eaf274372d0b54b51ac95e5a62559fcc41dfd30a3ac9e73ca930a6083a9c59bf10baca68be238aa9f9bb0d08238674bbbe9992d919e8e3b78740942011bf1376babf31495fbe2433887cdeee92eefd3eb1d31360370ab9d2727161d6bb27594ffd3568452e0e514d929b6d0f7fedc7e776b6f7cb034e462441a855a500842011cac274dc007ba01c568d3c2c928f4c7878f5f473dee7c1440472f6fb18aba9d673e41e33f2aed0d3b7dbb12ff11f7b0ce59b3233a699618a74d64eee9475bf6f842011c0194499ac67d079ed6363c118f6a86cb90f70415183a192b63ca6a8c499516c44eb486dddac7b8110e555dae9010e2b9409f07a47f5fc782abe80623cfd5b51142011c393897c4fb77264caddc74f4361a482c7841d5316599e2a492b889c2db3d2611419947a1da60e81934307c73b59fbf58aa89cdf0048f97e6550a08772f073ecb";
    let serialized = hex::decode(input).expect("hex decoding failed");
    let _header = match Header::dep_decode(&mut serialized.as_slice()) {
        Ok(h) => h,
        Err(err) => panic!(
            "Header deserialization error: {}",
            std::str::from_utf8(&err.message_bytes()).unwrap()
        ),
    };
}

#[test]
fn test_consensus_payload_deserialization() {
    let input = "";
    let serialized = hex::decode(input).expect("hex decoding failed");
    let mut source = ZeroCopySource::new(&serialized);
    let _payload = match VbftBlockInfo::decode_from_source(&mut source, true) {
        Ok(p) => p,
        Err(err) => panic!(
            "Consensus payload decoding error: {}",
            std::str::from_utf8(&err.message_bytes()).unwrap()
        ),
    };
}
