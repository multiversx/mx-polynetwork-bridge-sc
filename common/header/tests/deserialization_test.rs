extern crate header;
use header::vbft_block_info::*;
use header::*;

extern crate hex;

use elrond_wasm::elrond_codec::*;
use zero_copy_source::ZeroCopySource;

#[test]
fn test_header_deserialization() {
    let input
    let serialized = hex::decode(input).expect("hex decoding failed");
    let _header = match Header::dep_decode(&mut serialized.as_slice()) {
        Ok(h) => h,
        Err(err) => panic!(
            "Header deserialization error: {}",
            std::str::from_utf8(&err.message_bytes()).unwrap()
        ),
    };
}

#[test]
fn test_consensus_payload_deserialization() {
    let input = "";
    let serialized = hex::decode(input).expect("hex decoding failed");
    let mut source = ZeroCopySource::new(&serialized);
    let _payload = match VbftBlockInfo::decode_from_source(&mut source, true) {
        Ok(p) => p,
        Err(err) => panic!(
            "Consensus payload decoding error: {}",
            std::str::from_utf8(&err.message_bytes()).unwrap()
        ),
    };
}
